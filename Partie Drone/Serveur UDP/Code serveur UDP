// librairies
#include <iostream>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/socket.h> // utilisation du socket
#include <netinet/in.h>
#include <string.h>
#include <netdb.h>
#include <string.h>



// IP Raspberry : 192.168.1.32

using namespace std;


void error(const char *message);


int main(int argc, char **argvc)
{
	std::cout << "Lancement du serveur " << std::endl;
	  
	// variables
	int sock, length; 
	float n;
	socklen_t fromlen;
	struct sockaddr_in serveur;
	struct sockaddr_in from;
	char buffer[255];
	
	
	// initialisation du serveur
	sock = socket(AF_INET, SOCK_DGRAM,0); // configuration du mode UDP & domaine IPV4
	if(socket<0) error("ouverture du socket");
	length = sizeof(serveur);
	bzero(&serveur, length);
	serveur.sin_family = AF_INET;
	serveur.sin_addr.s_addr = INADDR_ANY;
	serveur.sin_port = htons(2600); // port d'écoute 2600
	if(bind(sock, (struct sockaddr *)&serveur, length) <0)
		error("binding");
			
	std::cout << "serveur UDP sur le port 2600" << std::endl;



	// traitement
	while(1)
	{
		n = recvfrom(sock, buffer, 255, 0, (struct sockaddr *)&from, &fromlen); // reçois le message du client
		if(n<0) error("recvfrom");
		write(1,buffer, n);
		
		// interpretation des valeurs
		
			/*
				if(n== 1.0)
				{
					printf(" a");	
				} else if (n==2.0) {
					printf(" r");
					
				} else if (n==3.0) {
					printf(" g");
				
				} else if(n==4.0) {	
					printf(" d");
				
				} else if(n==5.0) {
					printf(" bouton touche droite");
					
				} else if(n==6.0) {
					printf(" bouton touche gauche");
				}
			else {
					printf(" valeur inconnue ");
				  } */
		
								
		printf("\n");
		n = sendto(sock, "Etat", 17, 0, (struct sockaddr *)&from, fromlen);
		if(n<0) error("sendto");
		
			
	}
	
	return 0;
}


// En cas d'erreur de fonctionnement
void error (const char *message)
{
	perror(message);
	exit(0);
}
